from typing import Any, Dict, List, Optional


def get_cronjobs(namespace: Optional[str] = None, batch_client: Any = None, api_client: Any = None) -> List[Dict[str, Any]]: ...

def get_jobs(namespace: str, cronjob_name: str, batch_client: Any = None, api_client: Any = None) -> List[Dict[str, Any]]: ...

def get_jobs_and_pods(namespace: str, cronjob_name: str, batch_client: Any = None, api_client: Any = None) -> List[Dict[str, Any]]: ...

def get_cronjob(namespace: str, cronjob_name: str, batch_client: Any = None, api_client: Any = None) -> Dict[str, Any] | bool: ...

def get_pods(namespace: str, batch_client: Any = None, api_client: Any = None) -> List[Dict[str, Any]]: ...

def get_pod_logs(namespace: str, pod_name: str, batch_client: Any = None, api_client: Any = None) -> str: ...

def pod_is_owned_by(pod: Dict[str, Any], owner_name: str) -> bool: ...

def toggle_cronjob_suspend(namespace: str, cronjob_name: str, batch_client: Any = None, api_client: Any = None) -> Dict[str, Any]: ...

def trigger_cronjob(namespace: str, cronjob_name: str, batch_client: Any = None, api_client: Any = None) -> Dict[str, Any]: ...

def update_cronjob(namespace: str, cronjob_spec: Dict[str, Any], batch_client: Any = None, api_client: Any = None) -> Dict[str, Any]: ...

def delete_cronjob(namespace: str, cronjob_name: str, batch_client: Any = None, api_client: Any = None) -> Dict[str, Any]: ...

def delete_job(namespace: str, job_name: str, batch_client: Any = None, api_client: Any = None) -> Dict[str, Any]: ...
